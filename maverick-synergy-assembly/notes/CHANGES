Maverick Synergy 3.1.3 - TBC

Features
  o New Optional<String> for setting the sudo password once.
  o Renamed drain method in ShellProcess to waitFor and deprecated old name.
  
Bug Fixes
  o Fixed race condition in AuthenticationProtocolClient with more aggressive synchronization.
  o Moved CallbackSession isStopped to before retry interval to ensure it stops immediately after disconnect.
  o Added connect timeout option to CallbackClient.
  o Fix issues with authenticating with SHA-2 RSA certificates.
  o Remote unix domain socket tunnels did not work (local was OK).
  o If IdleConnectionTimeoutSeconds is set to zero (never timeout), and the ping message is never replied to, the connection would be dropped, but disconnection events would not be sent, and the disconnect future would not be released.
  o Fixed connection timeout.
  o Removed duplicate shutdown hook.
  o Don't pass properties file parent to register to avoid a NullPointerException on /logging.properties
  o Local filtering in SftpClient not activated if remote filtering extension not available.
  
=================
=  HISTORY      =
=================

Maverick Synergy 3.1.2 - Sep 20, 2024

Bug Fixes
  o Added strict mode option to SignaturePolicy for clients to require declaration of signature support in SSH_MSG_EXT_INFO when provided.
  o Specifically calculate dates with UTC time zone set to avoid local time zone defaults.
  o User and group information can now be defaulted on an AbstractMount.
  o Changed default public key preference from ecdsa to ed25519.
  o Incorrect parent mount passed to VirtualMountFile when resolving children.
  o CommandTaskBulder missing withConnection method.
  o Fixes regression found in callback service where `osshell` would fail to send keyboard input.
  o Logging indicates that an IP address will be temporarily banned even if banning has been disabled.
  o ScpClient and SftpClient have differing strategies for the default sandbox value. By default sandboxing is now turned off for both SFTP and SCP clients.
  o Client would hang if 'none' authentication succeeded.
  o Ensure attributes for SftpHandle are requested after file has been opened to maintain messaging strict sequence.
  
-----------------

Maverick Synergy 3.1.1 - 3 Apr, 2024

Bug Fixes
  o SshClient put file throws No connection or client supplied.
  o Fixed issue with Terrapin strict kex mode and messages after SSH_MSG_NEWKEYS.
 
-----------------

Maverick Synergy 3.1.0 - Feb 20, 2024

Features
  o Minimum Java version has been increased to Java 11.
  o The API is now compatible with JPMS (Java Modularisation)
  o Extendible SSH Agent transports. In order to allow optional native Unix domain socket support, and to reduce 3rd party dependencies, you must now choose one or more of the `AgentProvider` implementations. So add at least one of maverick-sshagent-jdk16-sockets, maverick-sshagent-named-pipes or maverick-ssh-agent-jni-sockets.
  o New module added to support JDK16's native Unix domain sockets to reduce dependency on third-party APIs.
  o Unix domain socket tunnels are now supported (direct-streamlocal@openssh.com, forwarded-streamlocal@openssh.com)
  o Authenticators requiring password/passphrase input now have optional Supplier argument for retrieving value when required and not at construction.
  o Added methods to utility classes to support Path objects.
  o Added static method getEnvironmentSocket to resolve agent socket through environment variables.
  o New IdentityFileAuthenticator that prompts for password once the key is deemed acceptable for authentication.
  o FileTransferProgress interface now made default.
  o Make SftpClient Closeable.
  o Jzlib dependency removed and replaced with standard Java compression API.
  o ServiceLoader is now the basis of the loading of components (i.e. ciphers, kex, public keys, hmac, compress). To achieve this, each component now has an associated factory class responsible for creating the implementation. To add custom ciphers etc, simple implement the cipher, it's factory, and add the service using the standard mechanism using module-info.java or a META-INF/services files.
  o Components may be enabled and disabled using ComponentManager.setDefaultEnabled().
  o Improved SshdConfigFile support for reading and writing sshd_config and ssh_config files.
  o Added isOlderThan method to IOUtils.
  o Extract format longname so it can be used by other SFTP clients.
  o Added IPPolicy to LoadBalancerPolicy.
  o Changed checkConnection to take InetAddress.
  o Added option for public key verifier implementation.
  o RSA keys will now upgrade to SHA2 types where possible.
  o Added UTF-8 mode to PseudoTerminalModes          
  o New PushSftp task to utilise multiple connections to increase throughput on latent networks.
  o All *Task implementations (ShellTask, UploadFileTask, DownloadFileTask etc) now have deprecated constructors and should be created through their new builder implementations.
  o Support for PseudoTerminalModes creation through new PseudoTerminalModesBuilder implementation.
  o Added new EVENT_REMOTE_DISCONNECTED even to capture remote reason for disconnection.
  o New multipart upload SFTP file extension to enable PushSftp on back-end storage that does not support random access across concurrent connections.
  o New s3 abstract file implementation that supports multipart uploads on Amazon S3.
  o Safer, modern, recursive delete methods on IOUtils.
  o Server now supports hardlink@openssh.com and statvfs@openssh.com
  o SshClientBuilder introduced as a replacement to direct SshClient construction.
  o SftpClientBuilder introduced as a replacement to direct SftpClient construction.
  o All Sftp extensions are now standard Java services. Use SftpExtensionLoaderFactory instead of DefaultSftpExtensionFactory in configuration. 
  
Bug Fixes
  o Implementations of available incorrectly return -1.
  o Support for window space using full UnsignedInteger32 value (instead of Integer.MAX_VALUE).
  o SshClient is missing getPort method.
  o Extensions were not being processed and were effectively not supported.
  o Reading SFTP v5 supported structure generates parsing error.
  
Other
  o Tests split into separate Maven projects. This is to allow development in Eclipse, which does not yet allow main source and tests that are modular to exist in the same project.
  o DirectFileJava7 has been deprecated and it's features moved to DirectFile. 
  o PuTTY support moved to it's own module, removing the Bouncycastle requirement in the core classes.
  
-----------------

Maverick Synergy 3.0.17 - May 3, 2023

Bug Fixes
  o SFTP v4 file type is accessible to all versions and not correctly set when using v3 of the protocol.
  o Ensure Diffie Hellman prime is generated with maximum bits possible to prevent random key exchange errors.
 
----------------- 

Maverick Synergy 3.0.16 - Jan 10, 2023

Bug Fixes
  o Version 5 "supported" structure is expecting count of supported extensions whereas specification expects read to EOF.
  o DynamicBuffer and ScpClientIO available method implementation does not adhere to contract and returns -1 when EOF instead of zero.
  o OpenSshCertificate incorrectly sorts extensions resulting in failed authentication attempts when custom extensions are present.
  o PrivateKeyFileAuthenticator will now additionally use certificate for authentication if a certificate file exists for the private key.
  
-----------------

Maverick Synergy 3.0.15 - Dec 1, 2022

Bug Fixes
  o Nested virtual mounts are not returned correctly in file listings.
  o ssh-ed448 keys were supported but could not be generated.
  
-----------------

Maverick Synergy 3.0.14 - Oct 20, 2022

Bug Fixes
  o Fixes to CachingDataWindow to help prevent truncation of data if data remains unread and cache is closed.
  o Channel data cache can be closed whilst a synchronized method is being executed.
  o Release all event listeners from channel collection when all events are exhausted.
  o Improvements to the way VirtualMappedFile caches children so that cache is cleared when events occur that could change contents of the directory.
  o SFTP thread synchronizer releases lock on access to reading thread even when the thread had not taken the lock itself.
  o Changed synchronization strategy in SshEngine to prevent slow shutdown. Also prevents the often seen RejectedExecutionException on shutdown.
  o Update VFS dependency to 3.3.0 final release
  o Throw an exception to avoid NPE when no file system is configured.
  o Support sandboxing in DirectFileFactory.
  o Support Windows 10/11 home folder locations in DirectFileFactory as well as previous Windows versions.

-----------------

Maverick Synergy 3.0.13 - Sep 2, 2022

Features
  o A number of improvements to CallbackServer to make it easier to spin up a reverse SSH service.
  
Bug Fixes
  o SshAgentClient will not connect to OpenSSH 8.9 agent because new extensions implemented by OpenSSH are fatal. The SshAgentClient now sends a failure message instead.
  o VirtualFileFactory much check the parent is actually a directory when listing children because it is possible that the parent folder does not actually exist, for example, if the current path is the parent element of a mount (/public does not actually exist when /public/foo is mounted).
  o When supported SFTP attributes is not null, only process flags when there is actually a value set. 
  o Added additional cleanup code after experiencing OOM in production use of the callback server using port forwarding.
  o SshClientCommand would not pass on terminal resize events. 
  o Added debug for authenticated future to track apparent race condition in callback session.
  o Moved AuthenticatedFuture instance from SshContext to TransportProtocol so that it can reference its transport in debug output.
  o Option to disable the sanitization of the identification strings software/version/comments.
  o Both the ConnectionProtocol and AuthenticationProtocol were notifying the authenticated future that it is complete. This has now been changed to just the ConnectionProtocol. 
  o CallbackSession would not cleanup a connected session if an error occurred during setup.
 
------------------

Maverick Synergy 3.0.12 - Aug 17, 2022 

Features
  o Allow a command to be passed to VirtualChannelFactory which will be executed as an alternative shell. For example when combined with OSShellFactory "osshell" command it can create a native shell experience for the user.
  o Support for zsh in "osshell" command.
  o Abstract out command execution from Shell into AbstractOSCommand so it can be reused to create native commands.
  o Implemented draft "copy-data" extension that allows files to be combined remotely on the server using their open file handle.
  o Implemented draft "check-file-name" and "check-file-handle" extensions for returning hash values for entire files, or parts of.
  o Improved verifyFiles method in SftpClient to use more recent draft extensions and now provides a choice of hash algorithm.
  
Bug Fixes
  o Incorrect use of bitwise operators means removing permission twice will actually enable it.
  o File system events don't have directory AbstractFile instance in attributes.
  o FileSystemPolicy uses a CachedFileFactory implementation that should cache per-connection, not per-instance.
  o Capture exception generated during SftpSubsystem initialization and throw an appropriate error so the channel gets cleaned up.
  o Made Subsystem nextMessage a synchronized method to prevent multiple threads attempting to read at the same time.
  o Premature change of authentication mechanism causes SSH_MSG_UNIMPLEMENTED.
  o SFTP attributes encodes flags that are defined in later protocol versions causing WinScp to error when listing a directory.
  o Removed non-compliant hmac-sha256 and hmac-sha512 algorithm types and changed HMAC preference to hmac-sha2-256.
  o Introduced getRemoteIPAddress to SshConnection which should now be used instead of getRemoteAddress (which has been deprecated). If you are using the server behind a load balancer with the proxy protocol this will ensure you get the correct address string and not NullPointerExceptions when you attempt to access fields on the unresolved InetAddress that represents the real IP of the client.
  o Allow configuration of environment and working directory in Shell command.
  o Pass on window resize events in CallbackShell.
  o Expand current working directory . to absolute path in default VFSFileFactory to avoid relative URI errors.
  
-------------------

Maverick Synergy 3.0.11 - Jun 29, 2022  

Features
  o Support for PuTTY Version 3 Private Key format (requires Bouncycastle dependency for Argon key derivation support)
  o Support for ed448 public and private keys
  o Added missing events for SFTP operations; EVENT_SFTP_GET_ATTRIBUTES for stat and EVENT_SFTP_DIRECTORY_OPENED for opening of a directory.
  o Added openRemoteClient method for using the existing connection as a jump host.

Bug Fixes
  o Fixed NPE when SCP is enabled on AbstractSshServer but no ChannelFactory has been set.
  o VFSFileFactory fails to resolve file with no default path is set and local file scheme is not supported. Added maverick.vfsDefaultPath system property that allows override of the default path.
  o Ensure mounts in VirtualFileFactory are initialized with VFSFileFactory with a default path of the mount path.
  o getTotalBytesIn / getTotalBytesOut methods on Connection<T extends SshContext> were present but not on implemented interface SshConnection. 
  
-----------------

Maverick Synergy 3.0.10 - May 4, 2022  

Bug Fixes
    o Refactor of VirtualFileFactory to provide consistent resolution of children.
    o Intermediate non-existent paths along a virtual mount path should be read only.
    o Calling enableFile twice on the same logging path should not create an additional log context but should instead reconfigure the existing context.
    o Added isMount method to VirtualFile to make it easier to determine if the file object is a mount or not.
    o VirtualMounts are now processed and cached in the VirtualFileFactory constructor.
    o There is no method to reset the logging contexts.
    o DirectFileJava7 attempts to set name of group/user using the SftpFileAttributes method that only accepts a numerical GID/UID.
    o PublicKeyAuthenticator setKeyPair method incorrectly stores unmodifiable collection causing UnsupportedOperationException when keys are removed during authentication.
 
------------------

Maverick Synergy 3.0.9 - March 21, 2022

Bug Fixes
    o New generic JCE based Ed25519 key implementation incorrectly writes the public key parameter to the private key field resulting in the key being unusable after reload from file.
    o Setting the read-only attribute on a SftpFileAttributes when version is <5 causes WinSCP to error during directory listing.
    o Azure SFTP disconnects if SSH identification string contains an additional hyphen in the software/version/comments part of the identifier. These are now replaced with an underscore character.
    o You cannot turn off the default IP banning policy which sometimes might get in the way of testing scripts.
    o Upload performance is constrained compared to download performance due to insufficient default window space in SFTP configuration. Default SFTP window space changed to 16MB. 
    
-----------------

Maverick Synergy 3.0.8 - March 4, 2022

Features
    o Removed hard dependency on BouncyCastle JCE for ed25519 keys. This now supports any JCE provider that supports ed25519 algorithm.
    o Refactored support for incomplete and non-functional feature in client to use HTTP, SOCKS4 and SOCKS5 proxies.

Bug Fixes
    o SftpFileAttributes setGroup and setUsername never set flag SSH_FILEXFER_ATTR_OWNERGROUP.
    o SftpFileAttributes does not use values set by setGroup/setUsername in v4 binary blob.
    o SftpFileAttributes does not validate UID/GID are numeric values.
    o Added getMount to VirtualFile interface for consistent mount returning function across virtual file types. Deprecated getParentMount on VirtualFileObject for same reasons.
    o Added security options for PROXY protocol which are restrictive by default to ensure a user cannot spoof their IP address.
    
-----------------

Maverick Synergy 3.0.7 - Dec 14, 2021

Features
    o Proxy protocol v1 is now supported for IP resolution through load balancers. Remote address on Connection object is replaced with unresolved InetAddress containing the IP and port of the source connection.
    o Further improvements to callback client and server.
    o Added getSessionCount method to SshConnection.
    o Enhancement to ExpiringConcurrentHashMap adding ExpiryConfiguration callback interface that allows external service to provide its own expiry setting.
    o VirtualShell now supports option for configuring the native command used when user executes the 'osshell' command.
    o Added ChannelFactoryListener interface for modification of channels as they are created in DefaultServerChannelFactory.
    o Require each channel declares its channel type through getChannelType method.
    
Bug Fixes
    o SessionChannelNG does not delegate subsystem creation to protected method making it impossible to override behaviour.
    o Default ping mechanism now only used when idle time configuration is zero.
    o Idle state mechanism incorrectly generates idle events every second after idle threshold is reached.
    o Failed to negotiate algorithm reports incorrect list of algorithms in exception text.
    o addInterface in SshEngineContext is expected to throw an error when an interface cannot be started when the server itself is already running.
    o Guard against NullPointerException in ComponentFactory configureSecurityLevel method.
    o Close event from RootShell was not providing RootShell instance as event source.
    o Incorrect XOR of flag causes NPE in SftpFileAttributes setTimes methods.
    o ConcurrentModificationExceptions seen with local forwarding under load when implementation uses ChannelEventListeners for feedback.
    o Fixes to VirtualShell "raw" mode to prevent duplicate reading of the session streams when a command needs direct access to the session.
    o Fixed replacements when UnknownHostException captured in virtual shell welcome message.
    o Wrapping SshConnection in SshClient can now optionally disable disconnection.
    o Allow SshClientCommand runCommand to be executed from another class by making it public.
    o Callback client reconnect interval is now fixed to interval provided rather than accumulative delay. 
    o Ensure channel without a data cache evaluates window space on channel data receive. 
    o Use ConcurrentHashMap in ExecutorOperationSupport listener collection.
    o A callback server should be identifiable by its identification string e.g. SSH-2.0-CallbackServer
    
-----------------

Maverick Synergy 3.0.6 - Oct 19, 2021

Features
    o Improvements and refactoring of reverse SSH connection "callback" API after testing in reference product.

Bug Fixes
    o SSH.com key fails parsing due to check length operation on array constructed from declaration of length; however, an additional byte to protect the MPINT from being negative was added to the length. Causing the final check length operation to fail.
    o SftpClient pattern matching put methods use wrong parent path resulting in incorrect file transfer results. 
    o Implemented the setting of attributes bits in SFTP v6 SftpFileAttributes.
    o VirtualMount needed a default set of permissions in order to provide a valid long name response.

----------------

Maverick Synergy 3.0.5 - Sept 20, 2021

Features
    o Added setTimes method that allow SFTP v4 creation time attribute to be set, including sub-second times.
    o Support signals. See AbstractSessionChannel.signal(String).
    o Native session implementation and associated factory for "osshell" command to drop virtual session into a native session.
    o VirtualMount option for lastModified and read-only flag which is now used by VirtualMountFile to return values.

Bug Fixes
    o If PasswordAuthenticator is passed to SshClient.authenticate it should be translated into keyboard-interactive if the remote server only supports keyboard-interactive regardless of context preference to support password over keyboard-interactive.
    o PasswordOverKeyboardInteractiveCallback should defer obtaining password until authentication is being performed.
    o Loading a license from file was broken.
    o OpenSSL private key file support broken due to incorrect reflection class name. 
    o Removed broken BouncyCastle OpenSSL public key file support as this was not complete and never implemented correctly.
    o VirtualMountFile should not resolve child until absolutely necessary to prevent list of mounts becoming slow due to destination resolution.
    o Regular expression file matching exists but not used in matchRemoteFiles.
    
-----------------

Maverick Synergy 3.0.4 - Aug 18, 2021

Features
    o Refactor of callback client; separated CallbackContextFactory and added SshConnection parameter to event methods.
    o Added before/after methods to Utils.
    o Create an SshClient from an existing SshConnection to allow wrapping of "jump" hosts.
    o Added CallbackRegistrationService for management of callback clients within a callback server.
    
Bug Fixes
    o Missing server-level collection of GlobalRequestHandlers.
    o Changed use of VFS SFTP 3.2.0 from snapshot to final version.
    o Made SwitchingCallbackContext constructor public.
    o Don't print stack trace of unsupported command, just log the error.
    o Allow protected access to child channel factories of ShellCommandFactory.
    o Allow protected access to console and ShellCommandFactory of VirtualShellNG session implementation.
    o Default callback identifier made consistent with SSH identification practices. 
    o Authentication future is not processed as part of client disconnect.
    o BouncyCastle 1.69 cannot load ED25519 key.
    o ClientAuthenticator should allow SshException to propagate. 
    o NPE when no license is set.
    o Client authenticators need to signal failure of the authenticator to their parent future.
    o OpenSSL public key file support broken due to incorrect reflection class name.
    
-----------------

Maverick Synergy 3.0.3-FINAL - Jul 21, 2021

Bug Fixes
    o Configure default connection timeout value of 600 seconds and ensure zero value is treated as no timeout.
    o VirtualMountFile and VirtualMappedFile now cache children until refreshed.
    
-----------------

Maverick Synergy 3.0.2-FINAL - Jul 20, 2021

Bug Fixes
    o File listing in VirtualFileFactory returns duplicate path entries for parents of mount entries.
    o VirtualMountFile no longer attempts to resolve its target file during construction and defers this until some operation is attempted on the file object.
    o Change junixsocket dependency of maverick-sshagent to version 2.3.4 to remove its transitive dependency of log4j 1.2
    
-----------------

Maverick Synergy 3.0.1-FINAL - Jul 9, 2021

Bug Fixes
    o Idle connection timeout issues after authentication.
    
-----------------

Maverick Synergy 3.0.0-FINAL - Jul 7, 2021

Features
  o Added isRunning method to AbstractSshServer.

Bug Fixes
    o VirtualMountFile fails when it's path within it's parent mount does not exist. 
    o Idle connection timeout issues after authentication.
    
------------------

Maverick Synergy 3.0.0-RC8 - Jun 21, 2021

Features
  o Log file transfers at INFO level with performance metrics.
    
Bug Fixes
  o When changing user/group via SftpFileAttributes create new attribute set with just the field being changed to avoid passing attributes that the server does not want to change.
  o Missing enableFile methods from RootLoggerContext interface.
  o Window space lockup when transfering to Maverick Legacy server due to Synergy attempting to write all blocks of data without checking responses.
  o SFTP channel does not exit after SSH_MSG_CHANNEL_EOF.
  o Transport idle mechanism not engaged causing idle timeout settings to be ignored. 
  o Added additional support for extending authentication idle timeout setting to any part of the communication prior to successful authentication.
 
------------------

Maverick Synergy 3.0.0-RC7 - May 26, 2021
 
Features
    o Added optional symlinkTo and readSymbolicLink methods to AbstractFile.
    
Bug Fixes
    o Do not read or write SSH_FILEXFER_ATTR_SUBSECOND_TIMES if parent time flag has not been specified.
    o Refactored SFTP session cleanup to ensure events are always generated.
    o EVENT_AUTHENTICATION_STARTED added and fired once to indicate client has started authentication service with username parameter, EVENT_USERAUTH_STARTED now is fired at the beginning of each separate authentication attempt with parameters for user and method being attempted. 
    o Fixed event started/finished attributes in authentication to encompass entire authentication step, and separately on each individual attempt.
    o Allow JVM default trusted CA certificate store password of "changeit" to be overridden with System property maverick.trustedCACertsPassword.
    o Use ConcurrentLinkedQueue to prevent concurrent modification on shutdown hooks collection.
    o Refactored support for OpenSSH certificate extensions to include support for custom extension definitions.
    o Fixed broken server-side SCP and command initialization.
    o Removed NONE value from SecurityLevel. This was only used in NoneCipher and NoneHmac, which are not installed by default and the option was confusing in other context.
    o Add server socket channel to all permanent accept threads.
    o Support for SHA2 signature usage in RSA certificates.
    o Fixed VirtualMappedFile double slash problem when resolving actual file path.
    o Double shutdown results n OutOfMemoryError.
    o Creating a directory over SFTP should fail if the parent does not exist. This can be overridden with FileSystemPolicy method setMkdirParentMustExist.
    
----------------

Maverick Synergy 3.0.0-RC6 - May 4, 2021

Bug Fixes
    o Upgraded BouncyCastle dependencies to 1.68 (BC) and 1.0.2 (BC-FIPS)
    o Upgraded commons-io dependency to 2.7.
    o Authentication hangs if server does not support KBI authentication or if `preferKeyboardInteractiveOverPassword` is false.
    o The static executor field on SshContext can be shutdown and then reused by another SshClient, resulting in an exception.
    
-----------------

Maverick Synergy 3.0.0-RC5 - April 6, 2021

Bug Fixes
    o FileLoggingContext fails with NPE when log path is relative.   
    o Authenticators setup in SshClientContext would incorrectly be attempted multiple times. 
    o ClientStateListener authenticate method no longer passes a List of Authenticator objects to be started after it returns. Authentication should be initiated within the authenticate handler.
    o Ensure that password authenticator future is triggered when wrapped with in automatic keyboard-interactive conversion.
    o Don't pass authenticator to PasswordOverKeyboardInteractiveCallback because there is no way for its future to be completed.
    o OpenSSH certificate extensions values and critical options not encoded correctly during sign operation. 
    o Fixed connection-based logging which was incorrectly preventing logging without an identification or user configured value.
    o Moved some VirtualFileFactory log statements to TRACE as they are even too chatty for DEBUG mode.
    o Callback role switching was broken for normal SSH clients due to changes made in TransportProtocol relating to posting of identification string.
    o Moved connection error TRACE statement to DEBUG
    o Callback mount URI should be passed to VFSFactory as base path.
    o AbstractFileSystem should be resilient to error during getAttributes call in readDirectory call.
    
-----------------

Maverick Synergy 3.0.0-RC4 - Mar 17, 2021

Features
    o Added shutdownAndExit method to SshEngine designed for calling before application shutdown (it is the applications responsibility to exit, this is just for clean up).
    o Added context option to disable preference of using keyboard-interactive authentication over password.
    
Bug Fixes
    o Fixed race condition where authentication client can receive failure message from the none authenticator.
    o OpenSSH RSA certificate incorrectly attempted to be decoded as ECDSA.
    o NPE when DefaultLoggingContext.shutdown is called and no file watcher has been initialized.
    o Removed synchronization from EventServiceImplementation to prevent delays in event handlers from slowing down other threads.

-----------------

Maverick Synergy 3.0.0-RC3 - Feb 2, 2021

Bug Fixes
    o Ensure console logger flushes out after a log statement has been written to console.
    o Forwarding channel receiving SSH_MSG_CHANNEL_CLOSE before SSH_MSG_CHANNEL_EOF could hang due to reliance on remote EOF state being received prior to accepting channel close. 
    o Added default timeout support to CachingDataWindow during put operation.
    
-----------------

Maverick Synergy 3.0.0-RC2 - Jan 25, 2021

Bug Fixes
    o Fixed implicit narrowing of long to int from code scan warning. 
    o SshServer required a method to be able to set the default Security Level.
    o Made ByteArrayReader more resilient to length errors when processing messages.
    
-----------------

Maverick Synergy 3.0.0-RC1 - Dec 27, 2020

Features
    o Major refactor to support more shared code with the Maverick Legacy APIs.
    o Removed all dependencies from core maverick-synergy-client and maverick-synergy-server modules to enable clearer choice on third-party dependencies.
    o CBC ciphers have been deprecated. You can enable CBC ciphers by calling ComponentManager.enableCBCCiphers();
    o DSA keys have been deprecated. We will no longer generate them, but you can enable support for using them if remote server requires them with ComponentManager.getInstance().enableAlgorithm("ssh-dss");
    o SftpSubsystem will now detect SftpOperationWrapper interface on installed AbstractFileFactory implementation.
    o Added event listener registration to SshConnection interface.
    
Bug Fixes
    o Selector threads and executor service threads have now been marked as daemon threads.
    
------------------

Maverick NG 2.0.5 - Jun 20, 2019

Bug Fixes
    o Ensure selector key is cancelled when forwarding socket error occurs.
    
-----------------

Maverick NG 2.0.4 - Mar 14, 2019

Features
    o Removed SLF4J dependency in favor of internal logging interface with support for console, file and connection based logging.
    o Added support for curve25519-sha256@libssh.org, rsa1024-sha1 and rsa2048-sha256 key exchanges.
    o Added key exchange unit tests.
    
Bug Fixes
    o Consume error when performing pending operations on selector to ensure other operations do not fail.
    o Changed default message sent to remote when a disconnection occurs because of an error.
    o changePositionofAlgorithm throws IndexOutOfBoundsException when presented with an algorithm that is not in the list*
    o Enabling BouncyCastle JCE does not configure separate Diffie Hellman algorithms causing alternative provider to be selected*
    o KnownHostsKeyVerification implementation fails on invalid entry.
    o Improvements to socket forwarding
    
-----------------

Maverick NG 2.0.3 - Jan 23, 2019

Features
    o Support for ECDSA, RSA and DSA keys in new OpenSSH private key file format. Keys generated by the API will now default to this format when written.
    o Support for BubbleBabble type fingerprint in SshKeyUtils and SshKeyFingerprint.
    o Refactor of NIO selector to defer reading/writing to a separate executor task. 
    
Bug Fixes
    o ExecutorOperationSupport included twice in separate jar files causing runtime conflict.
    o Server session channel incorrectly sending an initial window.
    o Ported SftpOperationWrapper from Maverick Legacy for callback before and after SFTP operations are executed.
    o ECDSA public key implementation of equals returns false even though public keys are the same.
    o ECDSA signature verification handling fixed to improve detection of SSH style signature.    1
    o Scp recursive mode should assume wildcard patter when non is provided.
    o Scp fix null permissions when creating a directory.
    
-----------------

****************************************************************************************************
IMPORTANT COMPATIBILITY INFORMATION

This release requires the use of maverick-common 2.0 which is included in this release. This is a 
new dependency that has been created to share a common base with the Maverick Legacy API to ensure
this API benefits from changes and new algorithms implemented in the production branch of the 
Maverick Legacy API.

This release is therefore not binary compatible with previous releases and you should expect to modify
your code accordingly with change in imports and minor interface changes.
****************************************************************************************************

Maverick NG 2.0.2 - Dec 14, 2018

Features
    o ConnectionStateListener has been extended to provide ClientStateListener which provides more detailed support for clients.
    o Client authentication can now be performed by declaring up front in context, or when required during ClientStateListener authenticate method.
    o Added changeWindowSize to client SessionChannel.
    o Connection executeTask now returns Future for Callable task passed.
    o Refactored common base to share code with Maverick NG.

Bug Fixes
    o To prevent connectivity problems bypass JCE to perform DH calculations manually if server sends a P value with a bit length that is not a multiple of 64.
  
-----------------

Maverick NG 2.0.1 - Sept 12, 2018

Features
    o Imported improvements to JCEComponentManager and JCEProvider added to our 1.7 branch.
    o Ported VirtualShell from our 1.7 branch.
    o KnownHostKeyVerification added to provide full support for current known_hosts file specification.
    o Support for Public Key subsystem (requires add/remove/list implementation support in PublicKeyAuthenticationProvider).
    
Bug Fixes
    o Added further improvements to channel data handling and window space handling.
    o Encoding of DSA signatures causes intermittent verification failures.
    o DefaultClientChannelFactory and DefaultServerChannelFactory no longer extend ComponentFactory because Channel implementations now have constructor arguments and cannot be created dynamically.  

------------------------

Maverick NG 2.0.0 - Mar 6, 2018

Features
    o NEW client framework for implementing SSH2 clients with java.nio support.
    o Supports port forwarding, session channels and SFTP client.
    o Adding missing method to getExtendedAttribute and hasExtendedAttribute to SftpFileAttributes.
    o Improved memory handling in SSH channels.

Bug Fixes
    o sendChannelData does not allow ByteBuffer to be used directly. 
    o NPE in shutdown when shutdown hook is not set.
    o Diffie Hellman Group Exchange methods fail to return the size requested.
    o Improved JCEComponentManager startup to ensure existing BC provider does not prevent DH algorithm configuration.*
    o Improved JCEComponentManager startup logging.*
    o Simplified handling of outgoing socket forwarding data.

=================
IMPORTANT NOTICE
=================

Maverick NG was branched from the Maverick Legacy Server code-base at version 1.6.14, refactored and repackaged to com.sshtools namespace. 

All depreciations in Maverick Legacy Server have now been removed leaving a clean updated API for the server. Maverick NG introduces a 
context-per-connection design allowing the configuration of each incoming connection to be modified to requirements.

SSHD Maverick 1.6.14 - Dec 10, 2015

Features
    o New EVENT_SFTP_SESSION_STOPPING event to indicate when SFTP session shutdown has been initiated, includes attributes for open files and directories.
    o Added getFileForHandle method to AbstractFileSystem.
    o Added ATTRIBUTE_OPERATION_STARTED and ATTRIBUTE_OPERATION_FINISHED to EVENT_SFTP_SESSION_STOPPED.
    o Authenticator type interfaces can now throw IOException to optionally force immediate disconnection.
    
Bug Fixes
    o Bug in improved sendChannelDataAndBlock method causes deadlock if channel data has to be split into smaller messages.
    o Authentication mechanisms perform all operations on IO thread.
    o Extended ExecutionOperationSupport to Subsystem sendMessage.
    o Log consumed exception in AbstractFileSystem.closeFile.
    o Scp requires spaces in filenames to be escaped with backslash. Added optional system property switch -Dmaverick.disableScpSpaceException=true to disable this behavior.
    o File paths in SFTP should not be trimmed. 
    o Use ConcurrentHashMap instead of Collections.synchronizedMap to prevent concurrent modification errors.
    o 4k minimum window size to small for forwarding channels, increased to 32k.
    o Scp command does not produce file not found message when request for non-existent file is made.
    o diffie-hellman-group-exchange methods fail test when backwards compatibility is disabled.*
    o Create time not exposed in SftpFileAttributes (SFTP version 4 attribute).
    o Incomplete error attributes on read/write events. 
    o Inclusion of version 4 attribute flag causes problems with clients that validate attribute flags.
    o x509v3-ecdsa-sha2-nistp384 and x509v3-ecdsa-sha2-nistp521 typos in JCEComponentManager registration.*
    
* Requires upgrade to maverick-common 1.1.1 which is included in this release.

------------------

SSHD Maverick 1.6.13 - Sept 14, 2015

Features
    o Optional events EVENT_SFTP_FILE_READ, EVENT_SFTP_FILE_WRITE for SFTP read/write operations. Enable via SshContext setSFTPReadWriteEvents method.
    o DirectFile implementation returns native file attributes if running in Java 7+ environment.
    o New authentication idle timeout option added to allow different idle timeouts depending on connection state.
    o Plumbed in ShellPolicy and ForwardingPolicy to replace functionality provided by AccessManager interface.
    o Added IPPolicy implementation to replace canConnect functionality provided by AccessManager interface.
    o Added getRequiredMechanisms method to AuthenticationMechanismFactory to replace getRequiredAuthentications functionality provided by AccessManager interface.
    o To help protect against Logjam new setting of minimum Diffie Hellman prime size added with default value of 2048 bites.
    o Moved some logging statements to verbose mode to make reading log files easier.
    o RFC 6187 RSA certificate of 2048 bits supporting SHA256WithRSA signature added*
    o Added getMappedFile method to VirtualMappedFile to enable access to actual file.
    o Support for hmac-ripemd160, hmac-ripemd160-etm@openssh.com message authentications.
    o Support for Encrypt then Mac message authentications hmac-md5-etm@openssh.com, hmac-sha1-etm@openssh.com, hmac-sha2-256-etm@openssh.com, hmac-sha2-512-etm@openssh.com
    o Added EVENT_SFTP_FILE_UPLOAD_STARTED, EVENT_SFTP_FILE_DOWNLOAD_STARTED, EVENT_SFTP_FILE_ACCESS_STARTED events 
    o Allow revert to old (broken) behavior to return all supported authentication mechanisms on partial authentication. Set system property -Dmaverick.oldMethodsToContinue=true
    
Bug Fixes
    o Improved sendChannelDataAndBlock method to ensure data has been written to socket. Previously a rare race condition exists which could see the queued data overwritten before it was transferred to the channel data message.
    o Fixed synchronization in SocketForwardingChannel after discovering deadlock.
    o ECDSA keys cannot be loaded if another JCE exists that processed EC keys and has a higher priority in security configuration*
    o Session channel fails to kill ScpCommand if its still active on session close.
    o AbstractDirectFile fields changed to protected for better extension support.
    o Extracted RandomAccessImpl to public class with protected fields for better extension support.
    o AbstractFileSystem renameFile would allow non-writable files to be renamed.  
    o Open file event not being fired from SFTP subsystem. 
    o Ensure enough key data is available for the size of the cipher or mac.
    o SFTP v4 text mode does not ignore read/write offset as specified by SFTP specification.
	o AbstractFileFactory processEvent was not plumbed into SftpSubsystem events.
    o AbstractFileSystem consumes AbstractFile.close IOException.
    o SFTP long name file listing format does not include day of month.
    o SFTP error events do not contain exception. 
    o For clarify call getDefaultPath instead of getFile("") in AbstractFileSystem.
    o VFSFile does not process last modified time correctly. 
    o AbstractFileSystem only checks writable flag in AbstractFile if file exists.

* Requires upgrade to maverick-common 1.1.0 which is included in this release.
		    
*****************
IMPORTANT COMPATIBILITY INFORMATION

For users combining both our client and server APIs in the same classpath you should ensure that both versions of the API used are compatible with a maverick-common version of 1.1.0.
If for any reasons you just use a single product and ship the individual jar files you should ensure you ship the maverick-common 1.1.0 version included in this release.
*****************

-----------------

SSHD Maverick 1.6.12 - May 15, 2015

Features
    o Optional per-connection upload quota limit added.
    
Bug Fixes
    o Removed printStackTrace and instead added warn level log on reflection error when attempting to load newer implementation of OpenSSHPrivateKeyFile that depends on Bouncycastle PKIK.
    o Added debug logs to VFSFileFactory to help resolve FileNotFoundException causes.
    o Log missing BC dependency rather than printStackTrace.*
    o Virtual shell corrupts/overwrites its own output before channel data is sent.
    o ShowLastError command throws a cast exception.
    o Commands cannot be hidden.
    o Virtual shell does not select default keybindings and various flavours of xterm fail to be recognized.
    o Optional Bouncycastle dependencies upgraded to version 1.52*
    
* Requires upgrade to maverick-common 1.0.9 which is included in this release. 

------------------

SSHD Maverick 1.6.11 - Mar 24, 2015

Bug Fixes
    o Throw appropriate exception in RootShell if file system is not an AbstractFileSystem derived implementation.
    o NullPointerException when uninitialised ProxySession is closed.
    o AccessManager canConnect is now additionally called after each failed authentication giving the server a chance to disconnect if application rules have decided the attempt is no longer allowed.
    
-----------------

SSHD Maverick 1.6.10 - Feb 24, 2015

Features
    o Proxy session implementation that utilizes Maverick Legacy Client to proxy another SSH session through the server.

Bug Fixes
    o JCE expects a padded RSA signature but protocol allows client to send unpadded resulting in random authentication failures.
    o Re-factored SocketForwardingChannel to prevent thread lock up.
    o NullPointerException when first connection is denied from AccessManager.canConnect.

-----------------

SSHD Maverick 1.6.9 - Jan 12, 2015

Bug Fixes
	o Exception caught processing publickey authentication is not logged so reason for error simply cannot be obtained.
	o Connection not set in PublicKeyAuthentication causing NullPointerException during publickey authentication.
    o TransportProtocol fails to log actual error after catching Throwable.
    o Ensure AbstractFileSystem read returns all bytes requested unless file is EOF.
    o Username/group flag in SFTPv4 attributes not set.
    o Ability to order ciphers, macs, keyexchanges etc by passing String array of preferred order.*

* Requires upgrade to maverick-common 1.0.7 which is included in this release. 

-----------------

SSHD Maverick 1.6.8 - Sept 23, 2014

Features
    o Added getter methods for cipher, compression and mac settings to TransportProtocol.
    
Bug Fixes
    o Removed erroneous output from JCEComponentManager startup*
	o Bug in Authentication Protocol that meant AuthenticationMechanismFactory supported mechanisms was not used in some scenarios.
    o If Maximum concurrent transfers is zero an IllegalArgumentException is thrown when ExecutorService is first accessed.
    o OpenSSH private key format made library always depend on Bouncycastle JCE provider and associated libs.

* Requires upgrade to maverick-common 1.0.6 which is included in this release. 

------------------

SSHD Maverick 1.6.7 - Aug 26, 2014

Features
    o Added hmac-sha2-512, hmac-sha2-512-96, hmac-sha2-256-96 mac algorithms*.
    o Added ecdh-sha2-nistp256, ecdh-sha2-nistp384 and ecdh-sha2-nistp521 key exchange algorithms*.
	o Added x509v3-rsa2048-sha256, x509v3-ecdsa-sha2-nistp256, x509v3-ecdsa-sha2-nistp384 and x509v3-ecdsa-sha2-nistp521 public key algorithms.*
	o NativeSessionChannel implementation added for Linux based servers.

Bug Fixes
	o Made backlog setting available on ListeningInterface.
	
* Requires upgrade to maverick-common 1.0.5 which is included in this release.

-------------------

SSHD Maverick 1.6.6 - Jun 9, 2014

Bug Fixes
	o Scp command now makes use of ExecutorService in SshContext to perform its operations on a pooled thread.
    o Made VirtualFileSystem more resilient to double slashes in paths.
    o ExecutorService core threads never timeout. Default behaviour is now for core threads to terminate after 60s of idle.  
    o Upgraded BouncyCastle dependencies to 1.50 versions due to potential memory leaks created by the JCE library.*
    o Forwarding channel could be overloaded with data from forwarding socket causing excessive heap memory and potential OOM.

* Requires upgrade to maverick-common 1.0.4 which is included in this release.

------------------

SSHD Maverick 1.6.5 - Feb 12, 2014
    
Bug Fixes
    o File attributes in formatted long name fails to show correct file type in permissions string.
    o Automatically determine v4 type field from v3 permissions for backwards compatibility.
    o Imaginary file in directory listing causes FileNotFoundException.

-----------------

SSHD Maverick 1.6.4 - Jan 29, 2014

Features
    o Support for SFTP version 4. This needs to be explicitly enabled using SshContext's enableSFTPVersion4 method.
    o New AbstractFileSystem added making it easier to add file systems with an AbstractFile interface similar to java.io.File.
    o DirectFileFactory concrete implementation of AbstractFileFactory that uses standard java.io.File to serve local files.
    o Preliminary support for RFC 6187 X509 certificates for RSA and DSA public key algorithms. OSCP responses are currently not retrieved and encoded or validated by the server if received.*
    
Bug Fixes
    o File attributes provided by the client are not being passed to makeDirectory.
    o Permanent transfer thread refuses to register new channel without throwing exception resulting in hung client connection.
    o Workaround added for NIO epollWait JVM bug.
    o Buffer overflow caused by unexpectedly large file system packets.
    
* Requires upgrade to maverick-common 1.0.2 which is included in this release. 

-------------------

SSHD Maverick 1.6.3 - Sept 25, 2013

Features
    o Support for PKCS8 PEM encoded private keys (required BouncyCastle JCE provider installed)*
    
Bug Fixes
    o SelectorThread fails to close its own selector.
    o Shutdown under load potentially locks up in channel data queue. 
    o Shortened shutdown timeout values to help reduce shutdown time.
    o Fixed NPE in SftpSubsystem shutdown.
    o SFTP mkdir request fails to check if parent folder exists.
    o Scp upload event passes incorrect path in filename attribute.
    o Added hmac-sha2-256 algorithm to supported Hmacs*
    o Support for larger N sizes in DSA key signatures allowing > 1024 bit DSA keys to be utilised*
    
* Requires upgrade to maverick-common 1.0.1 which is included in this release. 

--------------------

IMPORTANT NOTICE:

This is the first public release of the 1.6.x stable branch. Previous releases indicated below were 
internal releases only. Source code developed with versions 1.4.x or lower will not be binary compatible
with this API although changes should be minimal as this new branch is a continuation of the work of those 
branches and should be considered the stable successor to 1.4.x versions.

Please note that the internal cryptographic provider has been removed and as such all cryptographic
functions are provided by the installed Java Cryptography Extensions (JCE) in your environment. The minimum
required version of Java is 1.5. 

SSHD Maverick 1.6.2 - Sept 5, 2013

Bug Fixes
    o Incoming swap byte[] is not dereferenced on socket close causing potential memory leak.   
    o Removed invalid check for null in SftpSubsystem RealPathOperation.
    o ConcurrentModificationException thrown during shutdownNow.

------------------

SSHD Maverick 1.6.1 - Jul 18, 2013

Bug Fixes
    o Subsystem operations moved to transport to allow other components to synchronize with cleanup correctly.
    o Cleanup was executed based on session identifier being a non-null value, however if key exchange had not completed, cleanup would not be performed. 
    o Authentication Failure event is not fired on the final attempt when authentication retry limit is reached.

------------------

SSHD Maverick 1.6.0 - June 19, 2013

Features
    o Logging is now provided though SLF4J.
    o API is now built with and requires a minimum Java version of 1.5.
    o Build system changed to Maven.
    o Common components shared between client and server implementations have been moved to a separately versioned jar file to help compatibility between the two.
    o Internal cryptographic provider has been removed.
    o Added support for Elliptic Curve keys ecdsa-sha2-nistp256, ecdsa-sha2-nistp385 and ecdsa-sha2-nistp521.
    o SFTP threading is now controlled by an Executor providing the ability to configure maximum number of concurrent transfers or replace with your own implementation.
    o VirtualFileSystem can now be instantiated with mount objects removing the need for system wide configuration.
    o FileSystemFactory now controls creation of FileSystem instances.
    o Added Connection object for easy identification of individual sessions in events.
    
-----------------

SSHD Maverick 1.4.44 - May 10, 2013

Features
    o Added SocketConnectionFactory interface to allow possible override of SocketConnection implementation on a per-connection basis.
    o Added SshContext.enableFIPSMode to configure the server to only use FIPS supported algorithms. This requires a JCE that supports 2048 bit DH primes so is incompatible with SunJCE, use BouncyCastle JCE to support this or a FIPS certified JCE.
    
Bug Fixes
    o Ensure selector is closed correctly at end of selector thread.
    o SocketForwardingChannel could potentially send data out of sequence if last message in queue was not written fully.
    
-----------------

SSHD Maverick 1.4.43 - Mar 21, 2013

Features
    o Server can now start a listening interface with a port value of zero allowing the OS to select an open free port. Use ListeningInterface.getActualPort to retreive the allocated port number.
    
Bug Fixes
    o Remote forwarding request with zero port value allocates random unallocated port but fails to return correct value to client.
    o Remote forwarding request always returns port value in response causing incompatibility with some clients.
    o SCP client that fails to wait for acknowledgment of completed transfer causes premature channel close and termination of scp thread. Workaround added for this scenario to allow a transfer to be considered complete if server has received total file as reported by client.
    o SCP upload/download events were not fired for failed transfers.
    o ScpCommand.readFromRemote now captures base IOException and logs before re-throwing for error state clarity.
    o Server fails to put ciphers into use immediately after sending SSH_MSG_NEW_KEYS resulting in error if client SSH_MSG_NEW_KEYS is not received before an SSH_MSG_IGNORE is sent. 
    o License verification made less sensitive to whitespace changes.
    o Exception in ProtocolClientAcceptor.finishAccept could potentially leave a SelectionKey open.
    o Made synchronization in DataWindow consistently synchronize on the same object.
    o RemoteForwardingChannel window space and remote packet variables allocated incorrectly.
    o OpenSSHPublicKeyFile performs unnecessary check against key algorithm name preventing further supported types being used.
    o Forwarding channel does not send queued data before being closed when server is under load.
    o Channel.sendChannelDataWithBuffering is no longer useful as all channel data is buffered according to window space availability so method has been deprecated, use sendChannelData instead.

-----------------

SSHD Maverick 1.4.42 - Dec 7, 2012

Features
    o Updated RemoteForwardingManager to support x11 channels. Requires an implementation (not provided) as x11 channels are not supported by default.
    
Bug Fixes
    o Added setLocale method to SshContext. This allows the default locale to be changed, currently only used to generate the long name format in SFTP file responses.
    o Authentication protocol should not send a completed authentication method in the list of methods that can continue in a partial authentication success message.
    o Possible race condition in new SftpSubsystem shutdown process causes SFTP connection to hang upon close.
    o Allow zero length file flag set to false can incorrectly delete a file that had previously existed if the client opened and closed without reading/writing from the file). 
    o onChannelClosed not called when channel is closed due to unexpected connection shutdown.
    o Possible deadlock scenario in Channel.close and ConnectionProtocol.stop and processQueuedData
    
-----------------

SSHD Maverick 1.4.41 - Oct 24, 2012

Bug Fixes
    o SftpFile is now initialized with absolute path in readDirectory operations. This is for internal processing only, the filename sent to the client is still the name of the file relative to the directory as per specification.
    o Newly opened channel is closed incorrectly under load by the previous owner of the channel id calling close a second time. 
    o Failed transfer events at SFTP subsystem close now have open file handle SSHDEventCodes.ATTRIBUTE_HANDLE attribute.
    o A condition exists where a SocketForwardingChannel is able to send data out of sequence if last message in queue is not entirely sent on first attempt.
    o Maximum number of connections are tracked globally but each SshContext can have its own unique distinct setting. Connections are now tracked by context.
    o SFTP subsystem asynchronous operations thread could be ended prematurely causing transfer to end in error.
    o SocketForwardingChannel fails to request write operation after queuing data.
    
-----------------

SSHD Maverick 1.4.40 - Sept 19, 2012

Features
    o Added restart method to Daemon. Optional 'graceful' restart option allows server to stop accepting connections but continue to service existing connections. After all connections have closed (or a forced maximum time limit) the restart is performed.
    o AES-128-CBC encryption now supported in OpenSSH private key files.    

Bug Fixes
    o Ensure SelectionKey.cancel is called in shutdown to prevent Windows JRE from keeping listening port open.
    o Removed erroneous info log statement in SocketConnection to debug log.
    
-----------------

SSHD Maverick 1.4.39 - Sept 3, 2012

Features
    o Added support for diffie-hellman-group-exchange-sha256
    o Ability to change default hash algorithm for SSH key fingerprints.
    
Bug Fixes
    o Discovered race condition in transport protocol state when client sends SSH identification string and key exchange initialization packet before waiting for the server's SSH identification string.
    o ConnectionManager use of sessionid is subject to system default character encoding allowing potential clashes resulting in incorrect number of connections reported.
    
-----------------

SSHD Maverick 1.4.38 - June 28, 2012

Features
    o Flag added to SshContext to disallow zero length file upload.
    
Bug Fixes
    o X509 DSA certificate fails to be initialized from public key blob.
    
-----------------

SSHD Maverick 1.4.37 - June 9, 2012

Bug Fixes
    o Possible deadlock scenario fixed in TransportProtocol when thread attempts to post message whilst socket is closing.
    o SCP transfer fails with file not found when file exists on the system and path is correct. 
    o Unexpected disconnection of session during SFTP transfer can potentially cause NullPointerException.
    o Diffie hellman components not fully utilising JCE key agreement algorithm.
    o Vulnerability in internal cryptographic DSA provider fixed. http://rdist.root.org/2010/11/19/dsa-requirements-for-random-k-value/

-----------------

SSHD Maverick 1.4.36 - May 1, 2012

Bug Fixes
    o Fixed issue with forwarding channels causing excessive CPU usage in some close scenarios.
    
-----------------

SSHD Maverick 1.4.35 - Feb 8, 2012

Features
    o newline@vandyke.com SFTP extension added.
         
Bug Fixes
    o SessionChannel "exec" event fired incorrect event id.
    o Exception message not passed to client in SSH_FXP_REALPATH response.

-----------------

SSHD Maverick 1.4.34 - Sept 14, 2011
     
Bug Fixes
    o onChannelClose not called when connection is disconnected before remote SSH_MSG_CHANNEL_CLOSE is received.
    o TransportProtocol selectNegotiatedComponent made more tolerant of spaces in algorithm strings.
    o Uninitialised GSSAPI module causes connection error, GSSAPI must be added explicitly if you want to support it. To do this add context.supportAuthenticationMechanisms().add("gssapi-with-mic", Class.forName("com.maverick.sshd.GSSAPIWithMICAuthentication")); in your Daemon.configure method.
    o Virtual File System path canonicalization causes file not found errors with symbolic links with targets outside of valid mount paths. Use system property -Dmaverick.alternativeCanonicalize=true to enable a change in behaviour that allows these to be resolved whilst still maintaining mount security.
         
-----------------

SSHD Maverick 1.4.33 - June 3, 2011
   
Features                       
    o gssapi-with-mic authentication method added.
    o Added support for MD5 signatures in RSA certificates.
    
Bug Fixes
    o SFTP subsystem attempts to send exit code after channel is closed causing NullPointerException.
    o ExecutableCommand race condition causing data to potentially be sent prior to completion of 'exec' or 'shell' SSH_MSG_CHANNEL_REQUEST_SUCCESS message.
    o Optional workaround added for JDK bug 4640544 that prevents NIO non-blocking socket from binding on windows. Set -Dmaverick.windowsIpv6Workaround=true to activate.
    o File transfers not completed at connection close do not have any failed transfer events fired. 
    o AuthenticationProvider translation of session id into string can potentially cause NativeAuthenticationProvider.logoffUser() call to be skipped due to duplicate session id strings. 
    
-----------------

SSHD Maverick 1.4.32 - February 7, 2011

Features                       
    o Added methods to load keystore from InputStream and to allow store type to be specified.
    o Added support for hmac-sha256. 
    o Added support for x509v3-sign-dss public/private keys & certificates.
    
Bug Fixes
    o SFTP subsystem formats UID/GID integer values in ls -l operation. Added methods to SftpFileAttributes so that username/group strings can be added, many clients will show these instead of the UID.GID values when listing directories.
    o x509v3-sign-rsa made compatible with older version of specification.
    o Bad SSH client can cause OOM in SFTP operation by sending large number of read requests without releasing window space for the server to return the data requested. Default behavior of SftpSubsystem has subsequently been changed to require an asynchronous operation thread to ensure that reads are not performed before window space on the client is available. It is recommended that all users keep the default behavior and remove any calls to SshContext.setAsynchronousFileOperations
    o EVENT_SFTP_DOWNLOAD_COMPLETED in some circumstances may not have been triggered.
    o NativeFileSystemProvider.closeFilesystem does not get called in some scenarios.
    
----------------

SSHD Maverick 1.4.31 - September 16, 2010

Features                       
    o Added missing hmac-md5-96 and hmac-sha1-96 HMACs to JCE provider.

Bug Fixes
    o Exception caught in SelectorThread ends operation of thread, RuntimeException is not logged and causes thread to stop without warning. All Exceptions are now consumed and logged.
    o SCP get operation fails to reset session state, causing download failures if transfer takes longer than session timeout period.
    o Session channel sends SSH_MSG_CHANNEL_CLOSE on command/session execution failure before sending SSH_MSG_CHANNEL_FAILURE causing a potential deadlock scenario with J2SSH Maverick.

-----------------

SSHD Maverick 1.4.30 - July 14, 2010

Bug Fixes
    o  Discovered race condition in transport protocol state when client sends SSH identification string and key exchange initialization packet before waiting for the server's SSH identification string.
    o  Added additional checks to ensure SFTP asynchronous operation thread is closed in a timely fashion.                      
    o  Changed window space renewal strategy to work around Ipswitch WS_FTP inability to respond to window space adjustment when window space gets lower than the maximum packet size.
            
-----------------

SSHD Maverick 1.4.29 - May 24, 2010

Features
    o  addMount method to VirtualFileSystem to allow extension on a per instance basis by overriding init method and calling addMount after super.init
    
Bug Fixes
    o  ConnectionProtocol synchronization causes deadlock under race condition when external thread closes channel.
    o  Order of channel request response and issuing of window space changed to resolve connectivity issue with Ipswitch WS-FTP client. 
    o  Option added to NativeAuthenticationProvider to throw PasswordChangeException during password change to ensure keyboard-interactive authentication does not require user to re-enter original password again.
    o  Message can now be passed through to PasswordChangeException constructor for display in keyboard-interactive authentication.
    o  Number of failed password change attempts limited to 3 for each keyboard-interactive authentication cycle.
                     
------------------

SSHD Maverick 1.4.28 - March 26, 2010

Bug Fixes
    o  Added VirtualFileSystem call to PermissionHandler.canRead in getAttributes to ensure user has 
       access to file. 
       
------------------

SSHD Maverick 1.4.27 - February 12, 2010

Bug Fixes
    o Channel close synchronization causes deadlock when another thread attempts to issue window
      space after posting data.
    o Added check to ensure no queued data exists before closing channel.
    o Added null check on session when initialization fails; NullPointerException could be thrown 
      if client disconnects prior to initialization completing. 
    o Formatted attributes sent in SFTP protocol uses 12hr instead of 24hr time format.  
    o VirtualFileSystem StackOverflowError after invalid path is received from client. 
    o Added Option for NativeFileSystemProvider to return -1 rather than throw EOFException to indicate
      end-of-file in file reads. 
    o Changed SftpSubsystem asynchronous operation thread to notify waiting threads with notifyAll
      instead of notify
    o VirtualFileSystem now attempts to force remaining writes to disk before closing file. 
    
------------------

SSHD Maverick 1.4.26 - December 30, 2009

Bug Fixes
    o Uninitialised SecureRandom instance causes slow start-up due to delayed seed generation.
    o Forwarding channel sends EOF in response to remote socket close before writing remaining 
      queued data to channel.
    o TransportProtocol synchronization causes deadlock with ConnectionProtocol when multiple
      connections attempt to communicate internally across threads.

------------------

SSHD Maverick 1.4.25 - December 9, 2009
    
Bug Fixes
    o EventServiceImplementation made thread safe.
    o HashMap use converted to ConcurrentHashMap in areas where multiple threads could
      potentially access the Map concurrently. 
    o SessionChannel.evaluateWindowSpace changed synchronization from Channel.this to 
      Channel.localWindowLock  
    o Standalone hmac-sha96 implementation broken. 

-----------------

SSHD Maverick 1.4.24 - November 16, 2009
    
Bug Fixes
    o Incorrect operator usage in standalone cryptography provider implementation of
      Diffie Hellman key exchange could generate and use algorithm values that do not
      conform to key exchange specification. 
      
-----------------

SSHD Maverick 1.4.23 - November 9, 2009
    
Bug Fixes
    o License error is logged but should be thrown from Daemon.startup.
    o SCP command can potentially leave thread running if session is closed uncleanly.
    o Virtual File System sends real path information back to client in some error messages.
    
-----------------

SSHD Maverick 1.4.22 - August 25, 2009
    
Bug Fixes
    o Server fails to send disconnect message before disconnect socket. 
    
-----------------

SSHD Maverick 1.4.21 - August 7, 2009
    
Bug Fixes
    o UNC paths as mounts do not work
    o Removed info level logging from ByteBufferPool.
    
-----------------

SSHD Maverick 1.4.20 - August 6, 2009
    
Bug Fixes
    o Added debug jar file for each version of release jar.
    o Fixed security issue with VirtualFileSystem mounts that use partial matching names.
    
-----------------
    
SSHD Maverick 1.4.19 - July 29, 2009

Features
    o   Added method to enable 'none' cipher in ServerComponentFactory. 
    o   Added AES and 3DES CTR mode ciphers to JCE cryptography provider.

-----------------

SSHD Maverick 1.4.18 - July 20, 2009

Bug Fixes
    o   Listening interface is now started when added whilst daemon is active. 
    
-----------------

SSHD Maverick 1.4.17 - July 13, 2009

Bug Fixes
    o   Transport protocol fails to process socket data remaining in buffer after 
        a request for an immediate write operation.
    o   Low socket buffer causes corrupt mac on input errors.
    
-----------------

SSHD Maverick 1.4.16 - July 2, 2009

Bug Fixes
    o   Transport protocol fails to process socket data when received length is
        less than current cipher block size.

-----------------

SSHD Maverick 1.4.15 - June 24, 2009

Bug Fixes
    o   Socket disconnects no longer logged as error.
    
-----------------

SSHD Maverick 1.4.14 - June 18, 2009

Bug Fixes
    o   Erroneous log statement removed from Channel.java
              
----------------

SSHD Maverick 1.4.13 - June 11, 2009

Bug Fixes
    o   Remote forwarding channel always sends 'hard' TCP close ('RST' flag) to 
        TCP server when 'soft' TCP close ('FIN' flag) is received from TCP client.
    o   Forwarding channel fails to send additional window space in some circumstances.
    
----------------

SSHD Maverick 1.4.12 - June 9, 2009

Features
    o Added DaemonContext method to remove an active listening interface at runtime. 
    
Bug Fixes
    o Outgoing packet counter uses incorrect value causing key exchange to be performed 
      too often.
    o Fixed keep alive logic adding new keepAliveInterval and keepAliveDataMaxLength
      properties to SshContext to allow configuration of length and timing of keep alive 
      packets.  
      
-------------------

SSHD Maverick 1.4.11 - May 8, 2009

Bug Fixes
    o Fixed issue with custom default JCE provider not implementing secure random 
      algorithm. API now defaults back to system default.
      
-------------------

SSHD Maverick 1.4.10 - April 17, 2009

Features
    o Added arcfour, arcfour128 and arcfour256 ciphers to JCE provider.

Bug Fixes
    o Channel close event fails to fire in unclean client disconnect causing 
      memory leak in IdleStateManager.
    o Write state gets out of sync with client causing connection stalls.
    o Added session identifier attribute to fired events. 
    o Forwarding channel data queue not limited causing potential memory errors 
      and performance problems

------------------

SSHD Maverick 1.4.9 - March 18, 2009

Bug Fixes
    o When preferred public key is not loaded the server still reports algorithm as supported
      to connecting clients causing connection errors when clients select the unsupported
      algorithm.
      
-----------------

SSHD Maverick 1.4.8 - February 14, 2009

Bug Fixes
    o X509 public key implementation fails signature validation due to incorrect algorithm
      name in public key blob. 
    o Race condition in ScpCommand causes potential data corruption in SCP get operations.
    
-----------------

SSHD Maverick 1.4.7 - January 7, 2009

Features
    o Added new jar files that excludes all J2SSH Maverick client code to help resolve issues
      when using both APIs on the same classpath. Just include maverick-all.jar from J2SSH in your 
      classpath and use SSHD jar file that ends in no-j2ssh.jar
    
Bug Fixes
    o Server sends SSH_MSG_UNIMPLEMENTED in response to clients SSH_MSG_UNIMPLEMENTED.
    o Required authentication set to "password" takes no account of password over keyboard-interactive.
	o Connection hangs when client guesses first key exchange packet correctly. 
	
-----------------

SSHD Maverick 1.4.6 - December 12, 2008

Features
    o Added idle connection timeout option to SshContext.
    o Support for keyboard-interactive authentication added through new 
      com.maverick.sshd.platform.KeyboardInteractiveProvider interface.
    o Event service implementation now extends interfaces in J2SSH Maverick making it possible to 
      share an event service implementation across both products.
        
Bug Fixes
    o ServerComponentManager can throw NullPointerException in cases where multiple servers
      are created at the same time in the same JVM. 
    o VirtualFileSystem fails with NoClassDef error when using JCE only jar files.
    o WS_FTP Professional ignores window space and sends data that exceeds current window.
      Workaround added to ensure minimum window space is always above packet size used by WS_FTP.
    o SFTP asynchronous operation thread causes deadlock due to incorrect synchronization
    o Writable flag in SocketConnection set outside synchronization block causing output to hang temporarily.
    o X509 not automatically supported when running JCE cryptography provider.
    
----------------------------------

SSHD Maverick 1.4.5 - October 17, 2008

Bug Fixes
    o Disconnect message does not shutdown connection immediately in key exchange.
    
------------------

SSHD Maverick 1.4.4 - October 12, 2008

Features
    o Added diffie-hellman-group-exchange-sha1 to JCE provider.  

Bug Fixes
    o Component factory test to verify key exchange is supported by JCE can return incorrect state. 
    o Server Component factory initializes CTR mode cipher with CBC mode causing disconnection errors. 
    
-----------------------------------

SSHD Maverick 1.4.3 - August 27, 2008

Bug Fixes
    o Tunnel channels pause due to threading issue.
    o JCE only environment fails with NoClassDefError on com/maverick/crypto/digest/Hash.
    o AuthenticationProvider: added null check in getHomeDirectory
    o SocketConnection: added limit check to processWriteEvent to avoid calling socketChannel.write with no data
    o VirtualFileSystem: added SecurityException try catch block, and null check for the com.maverick.sshd.vfs.VFSRoot system property in init().
    o Fixed logging ClassCastException when parameter not a string
    
------------------

SSHD Maverick 1.4.2 - July 23, 2008

Features
    o ServerComponentManager: init() no longer overrides the createInstance() methods of each of the factories
    o SshContext: constructor no longer overrides createInstance when creating the compression factories.
    o TransportProtocol: moved the if(!name.equals(COMPRESSION_NONE)) from the SshContext constructor to the sendKeyExchangeInit() method so that the condition is checked once instead of twice. 
    o ServerComponentManager: added static setPerContextAlgorithmPreferences() and getPerContextAlgorithmPreferences methods.
    o SshContext: now supports per instance algorithm preferences.
    
Bug Fixes
    o Added correct examples
    
-----------------

SSHD Maverick 1.4.1 - July 09, 2008

Features
	o DaemonContext: added setProduct method that allows the a product name to be set that is used to prefix thread names, the default for this is now "SSHD-"
	o Daemon: now prefixes thread names with the product name set in the DaemonContext
	o DaemonContext: Changed addEventListener and removeEventListener methods to take a String threadPrefix parameter that allows listeners to be registered that will only listen to threads who's name starts with this string. 
	o DiffieHellmanGroups: new class to store the safe primes for DH key exchanges.
	o DiffieHellmanGroup14Sha1: Added now that there is better code safety to prevent seemingly random errors when JCE'S are used that do not support it.
	o DiffieHellmanGroup1Sha1JCE, DiffieHellmanGroup14Sha1JCE, DiffieHellmanGroup14Sha1Server and DiffieHellmanGroup1Sha1Server: have been tweaked to improve performance.
	o DiffieHellmanGroupExchangeSha1Server: added this key exchange algorithm to the standalone provider
	o JCEServerComponentManager: now tests each of the keyexchange algorithms before adding them to the list of supported algorithms, if the jce does not support the algorithm or the keysize it will not be added.
	o TransportProtocol: moved warning that the authentication provider is not set from onSocketClose to SshContext.init(). 
	o ServerComponentManager: changed to catch SecurityException on call to System.getProperty().
	o SocketConnection: added getPort() method.
	o SshContext: added GenerateKeyFiles() method.
	o StandaloneServerComponentManager: Added aes128-ctr, aes192-ctr, aes256-ctr ciphers.
	o SshContext: added setForwardingCallback() and getForwardingCallback() methods.
	o Cleaned up the DH key exchanges and moved the primes to a new com.maverick.components.DiffieHellmanGroups class.
	
Bug Fixes
	o Channel: isRemoteEOF is now set when the remote end of the tunnel goes EOF
	o ConnectionProtocol: fixed bug in workaround in stop() for clients that send disconnect before channelclose, that caused the state of the channel to not be set to closed
	o ConnectionProtocol: removed empty private jbInit() method and the call to it in the constructor.
	o ConnectionProtocol: added calls to ConnectionManager to register and unregister connections.
	o ConnectionManager: added back in, as was missed out of 1.4.0 release.
	o ConnectionManager: getConnection(byte[] sessionid) and getTransport(byte[] sessionid) now check if the provided sessionid is registerd, and return null if it isn't instead of throwing a NullPointerException.
	o DaemonContext and Daemon: now support IPV6.
	o DaemonContext: removed useless getProtocolContext() method.
	o Jars: Fixed problem with manifests that prevented them from being verified once signed using "jarsigner".
	o LocalForwardingChannel: removed unused idle() method.
	o PasswordAuthentication: removed unreachable catch block from the init() method.  
	o PublicKeyAuthentication: removed unreachable catch block from the init() method. 
	o RemoteForwardingChannel: optimized createChannel() method.
	o RemoteForwardingChannel: fixed a bug where connections to the start of a remote forwarding tunnel that were rejected by the end of the tunnel were not closed. 
	o Selector Thread: closeAllChannels(), fixed to call correct close methods to prevent memory leaks when server is shutdown whilst there are connections still active.
	o SftpSubsystem: onSubsystemFree(), fixed to close the NFS to prevent memory leaks when server is shutdown whilst there are connections still active.
	o SocketForwardingChannel: synchronized accesses to queue.
	o SocketForwardingChannel: fixed registrationCompleted() so that all messages received during registration are processed rather than just the first.
	o SocketForwardingChannel: fixed java.lang.ClassCastException: java.nio.HeapByteBuffer caused by incorrect cast when high activity causes data to be sent before registration is completed.
	o SshContext: fixed loadKeystore() method so that exceptions caused by unsupported algorithms are thrown not swallowed.
	o SshContext: removed unused private loadReflectionCipher() method.
	o TransportProtocol: removed unused i variable in negotiateProtocol.
	o TransportProtocol: removed unused method and field - getLastError() and lastError.
	o TransportProtocol: added getRemotePort(), getLocalAddress(), getLocalPort() methods.
	o VirtualFileSystem: removed unused package-private startsWithIgnoreCase() method.
	o VFSMount: class was package-private, but methods were public, changed methods to be package-private
	o Updated copyright headers
	o Cleaned code style.

-----------------

SSHD Maverick 1.4.0 - May 16, 2008

Features
	o  DaemonContext: Added addEventListener() and removeEventListener() methods for use with the new logging event model.
	o  DaemonContext: getListeningInterfaces() now returns all the bound interfaces rather than all the interfaces that Daemon tried to bind to.  
	o  Daemon: changed so that getLicense and getVersion methods appear in source to allow testing
	o  ProtocolEngine: Added disconnect() method.
	o  RemoteForwardingFactoryImpl: changed bindInterface() so that the backlog of the socket created is acquired from the 
	    com.maverick.sshd.SshContext.getMaximumSocketsBacklogPerRemotelyForwardedConnection() method.
	o  SelectorThread.closeAllChannels: Now disconnects the protocol engine.
	o  SshContext: new init() method added that sets the daemon instance, and new zero argument constructor added so that an SshContext instance can be created and configured before attaching a daemon to it.
	o  SshContext: added setRequiredAuthenticationMethods convenience method to set the authentication methods required by the server, options are PUBLIC_KEY, PASSWORD, PUBLIC_KEYandPASSWORD, ANY:
	o  SshContext: added getMaximumSocketsBacklogPerRemotelyForwardedConnection() and setMaximumSocketsBacklogPerRemotelyForwardedConnection() methods 
	    to com.maverick.sshd.SshContext.
	o  VirtualFileSystem: added closeFile(byte[] handle,boolean remove) method to com.maverick.sshd.vfs.VirtualFileSystem.java that allows a file to be closed but not removed from the list of open files, and changed closeFilesystem so that it closes files but does not remove them, to allow custom code to perform actions on closed files such as transfer them to a different location.
	o  multiple protocols can now be added to the server instead of being fixed to SSHD.
	o  DaemonContext and SshContext: have replaced ConfigurationContext
	o  Daemon: replaces SshDaemon
	o  SocketForwardingChannel: This now extends ForwardingChannel, most of ForwardingChannel's functionality is now in SocketForwardingChannel
	o  Extraction of Java NIO framework from the com.maverick.sshd package and a new generic NIO framework package created in com.maverick.nio.
	o  ProtocolEngine: replaces TransportProtocol
	o  ProtocolContext: replaces SshContext
	o  SocketConnection: added getPort method
	
Bug Fixes
	o  CustomForwardingManager: Memory leak fixed in com.maverick.sshd.custom.CustomForwardingManager.unregisterConnection 
	    where localForwardingManagers hashmap was not being cleaned up
	o  Daemon: Fixed cleanup bug where remote forwards were not cleaned up when shutdown() was called by Creating com.maverick.nio.ForwardingManager.java 
	    by abstracting com.maverick.sshd.RemoteForwardingManager and changing it to extend com.maverick.nio.ForwardingManager.java.  
	    com.maverick.nio.ForwardingManager.java now manages forwarding, has the getInstance method, and has a clearinstances() method 
	    which removes any registered forwardingmanagers.
	o  DaemonContext: getListeningInterfaces() now returns all the bound interfaces rather than all the interfaces that Daemon tried to bind to.  
	o  RemoteForwardingManager: Memory leak fixed in com.maverick.sshd.RemoteForwardingManager.unregisterConnection 
	    where remoteForwardingFactories hashmap was not being cleaned up
	o  SocketForwardingChannel: com.maverick.sshd.SocketForwardingChannel.processWriteEvent now checks if key==null 
	    to prevent NullPointerExceptions when processWriteEvent() is called after shutdownSocket() has been called.

-----------------

SSHD Maverick 1.3.4 - May 15, 2008
	
Features
	o  AbstractComponentFactory: Recoded  so that algorithm lists can be fully ordered, there is now a new changePositionofAlgorithm  method which facilitates this. 	
	o  ConfigurationContext: Added addEventListener and removeEventListener methods for use with the new logging event model.
	o  ConfigurationContext: Changed setAuthenticationProvider to accept an instance of AuthenticationProvider rather than an AuthenticationProvider class
	o  ConnectionProtocol: Added workaround to the stop() method for clients that send disconnect before channelclose to ensure that channels are cleaned.
	o  ServerComponentManager: Recoded ServerComponentManager,SshContext so that ciphers and macs can have independent preferences for Server->Client and Client->Server communications.
	o  ServerComponentManager: com.maverick.sshd.components.ServerComponentManager.java now tries JCE first if the com.maverick.sshd.components.ServerComponentManager.tryStandaloneCryptographyBeforeJCE is set to false otherwise Standalone is tried first, this allows the choice to use JCE or Standalone cryptography to be made programatically instead of by changing the classpath or creating a class loader.
	o  SessionChannel: added setMaxWindowSpace(int minSizeMultiple) method which allows the MAX_WINDOW_SPACE to be set to a multiple of MIN_WINDOW_SPACE.
	o  SshDaemon: added new method  com.maverick.sshd.SshDaemon.loadOrGenerateHostKey(File, String, int, ConfigurationContext, int, int, String) that allows the servers host key to be passphrase protected
	o  VirtualFileSystem: now logs an error if the vfs root path is not a directory or does not exist
	o  Added AES192CBC and AES256CBC ciphers.
	o  Removed DiffieHellmanGroup14Sha1 until better code safety can be added when JCES are used that do not support it.
	o  All logging has been changed to use an event model.  Important events have their own event codes, 
		less important events are wrapped using EventLog and use the "log event" code or the "debug" event code.
	o  TransportProtocol: Added getLocalPort, getLocalAddress and getPort methods.
	
Bug Fixes
	o  Channel: removed parameter from Channel.evaluateWindowSpace as it was not used in SessionChannel.
	o  ForwardingChannel: replaced evaluateWindowSpace's argument with localwindowWithPending to match SessionChannel.
	o  ForwardingChannel: fixed synchronization issue by synchronizing accesses to "queue".
	o  ForwardingChannel: fixed deadlocking issue in the setInterestedOps() method.
	o  SessionChannel: removed parameter from SessionChannel.evaluateWindowSpace as it was not used.
	o  TransportProtocol: internalDisconnect() now sets the socketChannel to null 
	o  Fixed the word occurred which was misspelt as occured.

-----------------

SSHD Maverick 1.3.3 - September 19, 2007

Features
	o  AuthenticationProvider: Added logon method that takes the clients public key as a parameter
	o  AuthenticationProviderChanged logon(byte[], String, SocketAddress, SshPublicKey) to 
		logon(byte[], String, SocketAddress, SshPublicKey, boolean).  
		If the new parameter is true then if provider.logonUser returns true, the pendingUser is not added to the list of current users.
	o  AuthenticationProvider: Added getAuthenticationStatus() method to  
	    to allow authentications to set an SshAuthenticationStatus variable when a simple boolean successful is inadequate.
	o  ConfigurationContext: Added setFileSystemProvider_KeyStore() method to allow the NFS for the KeyStore to be different from that passed to setFileSystemProvider().
	o  NativeAuthenticationProvider: Changed logonUser(byte[], String, SocketAddress, SshPublicKey) to 
		logonUser(byte[], String, SocketAddress, SshPublicKey, boolean).  
		The new parameter indicates whether the client is checking whether their key is acceptable 
		or they are attempting to logon.
	o  NativeAuthenticationProvider: Added getAuthenticationStatus() method to allow authentications 
	    to set an SshAuthenticationStatus variable when a simple boolean succesful is inadequate.

Bug Fixes
	o  TransportProtocol.internalDisconnect() now doesn't fail if the AuthenticationProvider is not set.
	o  AuthenticationProvider.getHomeDirectory() now throws an IOException if the users home directory does not exist.
	o  Changed com.maverick.ssh.components.AbstractComponentFactory.createDelimitedList(String preferred, Enumeration names) 
	    so that if the preferred component is not contained within the enumeration, it is not prepended to the list.

-----------------
SSHD Maverick 1.3.2 - August 13, 2007
Features
     o  Changed com.maverick.sshd.vfs.VirtualFileSystem: slight code optimisations

Bug Fixes
	 o	Changed com.maverick.nio.DaemonContext.setPermanentConnectThreads() so that it uses the permanentthreads parameter rather than the transferthreads paramater
	 o	Changed com.maverick.sshd.ConnectionProtocol.processChannelClose, ConnectionProtocol.processChannelOpenConfirmation ConnectionProtocol.processChannelOpenFailure to synchronized 
	    to fix a synchronization issue.
     o  Changed com.maverick.sshd.vfs.VirtualFileSystem.makedirectory to be consistent in the path type it sends to permissionhandle.canwrite
     o  Changed com.maverick.sshd.vfs.VirtualFileSystem: fixed removeFile() so that it calls canWrite() to check permissions before deleting.

-----------------
SSHD Maverick 1.3.1 - May 8, 2007

Bug Fixes
     o  CancelledKeyException can cause transfer thread to exit, causing hanging state
        for connected clients.

IMPORTANT NOTICE: 

This version of Maverick SSHD may not be compatible with source code developed using previous 
versions of the API. Changes have been required to some package structures to enable the 
cryptographic provider to be completely seperated from the API. These changes now allow us
to provide seperate implementations of the API for the internal cryptographic provider and 
the Java Cryptography Extensions provider. 

SSHD Maverick 1.3.0 - February 12, 2007

Features
    o  API can now be used exclusivley with the Java Runtime JCE provider, or alternativley
       the internal provider. Simply select the maverick-sshd-jce-only.jar file if you want to use
       the JCE exclusivley, or maverick-sshd-standalone-only.jar if you want to use the internal
       provider. The maverick-sshd.jar contains all implementations and will default to the
       internal provider. 

Bug Fixes

	o  AuthorizedKeysStoreImpl.java now passes the attributes of the authorizedKeysFile to nfs.openFile() instead of passing an empty set of attributes.

-----------------

SSHD Maverick 1.2.14 - November 28, 2006

Features
    o  SshDaemon startup method additional option to shutdown if any interface fails to bind. 
    o  Added option to clear a ConfigurationContext component factory.
    o  Added additional loadOrGenerateHostKey method that allows key format to be set. 
    
Bug Fixes
    o  VFSPermissonHandler interface does not provide getPermissions method with username parameter
    o  Shutdown method throws NullPointerException if server is not started correctly.
    o  Shutdown method ensures all threads are exited before returning.

-----------------
SSHD Maverick 1.2.13 - September 18, 2006

Features
    o  Added methods to SshDaemon to return the version and release date of the product.
    o  Support for x509v3-sign-rsa and x509v3-sign-rsa-sha1 certificates

Bug Fixes
    o  Added getter/setter method to ConfigurationContext to allow "Too many connections" text to 
       be changed.
    o  Added PermissionDeniedException to getFileAttributes methods.
    o  Non ascii characters in folder name causes "The handle is invalid" error.
    o  Canonicalization of paths may cause double // in path in log files.
    o  File system last modified date is out of bounds on rare occasions causing
       fatal errors when listing folders which contain these files. Check added to 
       prevent fatal error.

-----------------

SSHD Maverick 1.2.12 - August 8, 2006

Features
    o  Added diffie-hellman-group14-sha1 key exchange as per SSH Transport Protocol specification. This 
       implementation exists in both the internal crypto provider and JCE formats although it should be
       noted that the default SUN reference JCE provider does not support 2048 bit primes required by
       this key exchange method. The BouncyCastle JCE provider (www.bouncycastle.org) does and has been
       used to test this algorithm works with JCE enabled.

Bug Fixes
    o  Added system property "filezilla.bug.workaround" to help workaround an issue with Filezilla
       SFTP client 2.2.11. This version fails to respond to SSH_MSG_WINDOW_ADJUST after SFTP channel 
       is opened
    o  Reordered SelectorThreadPool creation to avoid accept threads accepting clients before transfer
       pool is initialized.
    o  ConcurrentModificationException thrown during shutdown if client attempts to connect. 

-----------------

SSHD Maverick 1.2.11 - July 22, 2006

Features
    o  Additional option to allow KEX for denied connections. This helps the client recieve a correct
       disconnection message rather than connection termination.
    o  New ConnectionManager singleton class added to provide lookup of TransportProtocol and ConnectionProtocol
       objects based upon the sessionid.

Bug Fixes
    o  Server passes all SSHredder vulnerability checks (http://www.rapid7.com/info/sshredder.html)
    o  Solaris 9 OP_CONNECT is never selected for loopback address.
    o  addListeningInterface fails to accept IPV6 address.
    o  SelectorThread fails to remove itself from the thread pool when thread exits.

-----------------

SSHD Maverick 1.2.10 - June 8, 2006

Features
    o  Maximum number of concurrent connections setting added to ConfigurationContext.
    o  Framework changes to allow LocalForwardingChannel and RemoteForwardingChannel to be overidden.

Bug Fixes
    o  Client hangs after access manager refuses to allow connection.
    o  Disconnection of clients in rare circumstances could cause session leaking.
    o  JCE ciphers returning null for zero length transformation causes connection failure.
    o  Added support for UTF-8 licenses.

-----------------

SSHD Maverick 1.2.9 - February 8, 2006

Features
    o  Added 'none' authentication mechanism which allows customization of the authentication banner
       message on a per-user basis.

Bug Fixes
    o  VFS permissions handler incorrect behaviour for removeDirectory
    o  Installed command is not executed when no AccessManager is available
    o  ServerSocketChannel can return null SocketChannel in call to accept
    o  When the server is shutdown and restarted old instances of the AuthenticationProvider are 
       being retained.

-----------------

SSHD Maverick 1.2.8 - July 22, 2005

Bug Fixes
    o  SSH key fingerprint uses incorrect algorithm.
    o  Transport protocol fails with large number of padding bytes

----------------
SSHD Maverick 1.2.7 - June 24, 2005

Features
    o  ConfigurationContext options to set socket option SO_REUSEADDR

Bug Fixes
    o  SCP filename pattern matching implementation changed to solve some compatibility issues.
    o  Public key authentication was ignoring the boolean value returned from NativeAuthenticationProvider logon.

-----------------

SSHD Maverick 1.2.6 - June 1, 2005

Features
    o  Configuration item added to allow a limit to be placed on the number of public key verification
       attempts made by a client. 

Bug Fixes
    o  SCP now handles escaped spaces in filenames, for example "foobar\ barfoo"
    o  Server shutdown failed to close selector correctly resulting in socket maintaining a listening state.
    o  Shutdown fails to free channels and call associated cleanup methods.
    o  Some servers suffer from big difference in Inbound vs Outbound performance.

-----------------

SSHD Maverick 1.2.5 - May 4, 2005

Bug Fixes
    o  Files transfered over SCP become corrupted
    o  AuthenticationProvider getHomeDirectory called with null username value.

-----------------

SSHD Maverick 1.2.4 - April 22, 2005

Features
    o  Configuration items for setting SO_KEEPALIVE and TCP_NODELAY on connected sockets.
    o  Option to override the default SFTP character set.
    o  PublicKeyStore interface added to allow customization of the public key authentication mechanism.
    o  NativeFileSystemProvider closeFilesystem method added and initialization contract changed.
    o  Further optimization to ensure faster throughput of data
    o  Server options to force key exchange after n packets or n bytes of data

Bug Fixes
    o  SCP directory uploading creates unexpected path structure.
    o  SFTP character set incorrectly defaulted to UTF-8.
    o  NativeFileSystemProvider readDirectory EOFException causes SCP error.
    o  SCP fails to upload directory
    o  Public key authentication fails to validate public key algorithm causing OutOfMemoryError
    o  SFTP does not read as many bytes from file as the client requests.

-----------------

SSHD Maverick 1.2.3 - February 24, 2005

Bug Fixes
    o  Server fails to respond to SFTP extension messages.

-----------------
SSHD Maverick 1.2.2 - January 28, 2005

Features
    o  Added onChannelClosing event to ChannelEventListener/ChannelEventAdapter

Bug Fixes
    o  Compression failure when using OpenSSH scp client
    o  Session timeout fails with ConcurrentModificationException
    o  Added exit code to SftpSubsystem client
    o  Fixed null username being passed into getHomeDirectory
    o  Termination of scp/sftp transfer was not disconnecting correctly if socket terminates in processWriteEvent
    o  SCP buffer overflow causes disconnection

-----------------

SSHD Maverick 1.2.1 - January 13, 2005

Bug Fixes
    o  AuthenticationProvider getRemoteAddress method fails to return address
    o  Uploading of files over SCP with compression causes client failure
    o  SCP thread fails to exit when a channel error occurs
    o  NPE when SCP attempts to close a channel thats already closed
    o  onChannelClosing is called after state is set to close
    o  Disconnecting of transport logs off user before closing all channels
    o  SCP client interrupt fails to free channel correctly

-----------------

SSHD Maverick 1.2.0 - January 11, 2005

Features
    o  Option to use external JCE - you can now optionally use an external JCE provider 
       for the following algorithms Blowfish, DESede, MD5, SHA1, SHA1withRSA, SHA1withDSA,
       RSA, DSA and DH (Diffie Hellman).
    o  startup method added to SshDaemon and constructor behaviour changed to require 
       added method to be called to start the service.
    o  NativeAuthenticationProvider interface updated to provide session id with all 
       method calls.
    o  Cleaned up session channel onChannel* event methods and removed final statements
       to allow implementations greater flexibility - always call the super method if 
       you override.
    o  AccessManager refactored to include several more security checks and to provide
       additional parameters for greater control.
    o  Option in ConfigurationContext to force all active remote forwarding tunnels to 
       close when a user cancels a remote forwarding listener.
    o  Option to buffer channel data and associated methods to block external threads
       attempting when they attempt to add more data than is available in the buffer
    o  Session timeout option
    o  Remote ip address now passed into NativeAuthenticationProvider

Bug Fixes
    o  SCP race condition causes file corruption
    o  Password authentication password change fails
    o  Public key authentication throws OutofMemoryError
    o  Port forwarding channels fail to send queued data when channel closes
    o  Forwarding channel data received before selector thread registration causes NPE
    o  When client disconnects the server is still bound to remote forwarding addresses
    o  Failed connection state causes logoffUser to be called with NULL session id
    o  Race condition in RemoteForwardingChannel causes Socket to remain open
    o  Removal of remote forwarding listeners throws modification exception
    o  Closing of port forwarding channel causes deadlock of the connection 
    o  SCP thread doesnt exit after file upload
    o  Failed socket bind causes server to shutdown even if other lstening interfaces are active

-----------------

SSHD Maverick 1.1.2 - October 14, 2004

Features
    o  Added getConnection method to Channel to return the associated ConnectionProtocol
       instance.
    o  NativeFileSystemProvider init method changed to take SessionChannel rather than 
       the sessionid. This provides access to session level properties such as sessionid
       and via the ConnectionProtocol the ip of the connected host.


Bug Fixes
    o  readFile reads more data than the client has requested. Changed the interface to 
       include the number bytes required by the client.

-----------------

SSHD Maverick 1.1.1 - October 14, 2004

Features
    o  Added methods to TransportProtocol and ConnectionProtocol to return the local
       address in use for an individual connection

Bug Fixes
    o  OutOfMemoryError thrown with large files 2GB+ when using SCP. Deprecated existing 
       NativeFileSystemProvider method readFile and replaced with readFile method that
       takes a buffer to avoid excessive allocation of memory.

-----------------

SSHD Maverick 1.1.0 - September 14, 2004

Features
    o  Software/Version/Comments field of the SSH identification string can now be modified to 
       show implementation specific information
    o  Each instance of SshDaemon can now listen on multiple interfaces for connections
    o  loadOrGenerateHostKey utility method added to SshDaemon
    o  Configure an ExecutableCommand as the default session

Bug Fixes
    o  Forwarding channels made thread safe
    o  SessionChannel hangs on failed command
    o  RSA host key signature fails when key is loaded from file

-----------------

SSHD Maverick 1.1.0 Beta 2 - August 8, 2004

Features
    o  ExecutableCommand abstract class added to provide support for individual command execution
    o  SCP support added as an implementation of ExecutableCommand
    o  LogoffUser method added to NativeAuthenticationProvider

-----------------

SSHD Maverick 1.1.0 Beta - July 26, 2004

Features
    o  Rewritten socket selector to only register OP_WRITE as an when needed. This provides better
       performance and removes the high CPU usage problem and removes a the third party dependency.
    o  Rewritten threading model to better distribute the load between available threads. An additional
       option is now provided to enable the maximum number of selectors per thread to be set. 
    o  Thread settings can now be set using the ConfigurationContext.

-----------------

SSHD Maverick 1.0.3 - July 20, 2004

Bug Fixes
    o  Shutdown method not available in SshDaemon causing possible net bind errors. A Runtime hook
       has been added to call this method when the VM exits but it is recommended that implementations
       provide a more reliable method of calling the method when the server requires to be shutdown.

-----------------

SSHD Maverick 1.0.2 - July 18, 2004

Bug Fixes
    o  Incorrect state caused identification string to be sent as a binary packet 
       (this caused client to hang or disconnect in error)
    o  SSH_FXP_REAL_PATH message changed to send absolute path in both filename and longname fields
       (this is not exactly how version 3 of the protocol describes but other client and 
       servers have adopted this method and therefore our implementation could cause a problem)
    o  SSH_FXP_STATUS message failed to include language field

-----------------

SSHD Maverick 1.0.1 - July 01, 2004

Features
    o  Source code distribution updated to contain dependent source files from J2SSH Maverick API

-----------------

SSHD Maverick 1.0.0 - June 18, 2004

Features
    o  Updated Javadocs with detailed information

-----------------

SSHD Maverick 0.1.3 - May 18, 2004

Features
    o  AccessManager interface added to control access to individual features by user

Bug Fixes
    o  Synchronous file operation thread failed to release object references for garbage 
       collection

-----------------

SSHD Maverick 0.1.2 - May 7, 2004

Features
    o  NativeProcessProvider removed from design in favor of abstract SessionChannel 
       which allows direct access to the session when creating native implementations.
    o  Added Channel extended data support
    o  NativeFileSystemProvider can now be configured to use asynchronous or synchronous 
       file operations

Bug Fixes
    o  ForwardingChannel could potentially fail to send channel data to SocketChannel
       if write operation did not write all available bytes
    o  Channel allocated too many ByteBuffer's causing OutOfMemoryError
    o  SFTP subsystem asynchronous thread failed to stop on session exit

-----------------

SSHD Maverick 0.1.1 - Apr 13, 2004

Features
    o  Public key authentication
    o  Maximum number of failed authentications property added to ConfigurationContext

Bug Fixes
    o  ProcessBinaryPackets can now handle multiple messages in a single read operation 
       correctly.
    o  SocketChannel fails to write complete packet causing protocol deadlock
    o  SFTP now uses NativeFileSystemProvider asynchrounously

-----------------

SSHD Maverick 0.1.0 - Feb 12, 2004

Features
    o  Supports SSH2 protocol
    o  Scalable implementation based upon the Java NIO framework
    o  Configurable number of data transfer, accept and connect threads
    o  Local/Remote port forwarding
    o  Password authentication
    o  Blowfish/3DES Encryption
    o  SHA1/MD5 Message Authentication
    o  ZLIB Compression
    o  NativeAuthenticationProvider interface allows customization of the login process
    o  NativeProcessProvider interface allows customization of process execution
    o  Supports SFTP
    o  Optional NativeFileSystemProvider interface to customize file access
    o  Built in VirtualFileSystem provides platform independent NativeFileSystemProvider 
       implementation
    o  VirtualFileSystem allows mounts to be defined by mapping virtual directories to 
       physical folders
